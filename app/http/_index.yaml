version: "1.0"
namespace: app.http.handlers

meta:
  depends_on: [ ns:app ]
  router: app:api

entries:
  - name: local_time
    kind: function.lua
    meta:
      comment: "Returns local system time formatted according to RFC3339 standard as JSON response"
    source: file://local_time.lua
    method: handler
    modules: [ http, time ]
    pool:
      size: 4
      workers: 16

  - name: local_time.endpoint
    kind: http.endpoint
    meta:
      comment: "Returns the local current time"
    method: GET
    path: /time/local
    func: local_time

  - name: demo_pid
    kind: function.lua
    meta:
      comment: "Simple HTTP endpoint that returns current function PID"
    source: file://http_pid.lua
    method: handler
    modules: [ http ]

  - name: demo_pid.endpoint
    kind: http.endpoint
    meta:
      comment: "Returns the current function PID"
    method: GET
    path: /pid
    func: demo_pid

  - name: fs_listdir
    kind: function.lua
    meta:
      comment: "Interactive directory browser with file analysis capabilities"
    source: file://list_dir.lua
    method: handler
    modules: [ http, fs, json, time, funcs ]

  - name: fs_listdir.endpoint
    kind: http.endpoint
    meta:
      comment: "Browse filesystem directories and files"
    method: GET
    path: /fs/browse
    func: fs_listdir

  - name: time_ticker
    kind: function.lua
    meta:
      comment: "Implements a 10-minute duration timer that emits JSON events every second with tick count and elapsed time"
    source: file://ticker.lua
    method: handler
    modules: [ http, time, json ]

  - name: time_ticker.endpoint
    kind: http.endpoint
    meta:
      comment: "Stream timer ticks as JSON chunks"
    method: GET
    path: /time/ticker
    func: time_ticker

  - name: system_env
    kind: function.lua
    meta:
      comment: "Streams environment variables as JSON with prioritized output of PATH, HOME, USER, and PWD variables first"
    source: file://env.lua
    method: handler
    modules: [ http, json, env ]

  - name: system_env.endpoint
    kind: http.endpoint
    meta:
      comment: "Get system environment variables"
    method: GET
    path: /system/env
    func: system_env

  - name: registry_dump
    kind: function.lua
    meta:
      comment: "Retrieves and dumps registry entries as JSON with optional filtering by namespace or ID"
    source: file://registry_dump.lua
    method: handler
    modules: [ http, json, registry ]

  - name: registry_dump.endpoint
    kind: http.endpoint
    meta:
      comment: "Provides JSON access to registry content with optional filtering"
    method: GET
    path: /registry/dump
    func: registry_dump

  - name: test_llm
    kind: function.lua
    meta:
      comment: "Test endpoint for LLM integration"
      depends_on: [ app.funcs.openai:llm_query ]
    source: file://test_llm.lua
    method: handler
    modules: [ http, json, funcs ]
    pool:
      size: 2

  - name: test_llm.endpoint
    kind: http.endpoint
    meta:
      comment: "Test LLM integration"
    method: GET
    path: /llm/test
    func: test_llm

  # Temporarily disabled due to wippy.llm dependency issues
  # - name: list_tools
  #   kind: function.lua
  #   meta:
  #     comment: "Lists all system tools and their schemas"
  #   source: file://tools_endpoint.lua
  #   method: handler
  #   modules: [ http, json ]
  #   imports:
  #     tools_reg: wippy.llm:tools
  # 
  # - name: list_tools.endpoint
  #   kind: http.endpoint
  #   meta:
  #     comment: "Provides access to all system tools and their schemas"
  #   method: GET
  #   path: /tools/list
  #   func: list_tools
  # 
  # - name: list_models
  #   kind: function.lua
  #   meta:
  #     comment: "Lists all available LLM models and their capabilities"
  #   source: file://models_endpoint.lua
  #   method: handler
  #   modules: [ http, json ]
  #   imports:
  #     models: wippy.llm:models
  # 
  # - name: list_models.endpoint
  #   kind: http.endpoint
  #   meta:
  #     comment: "Provides access to all available LLM models and their capabilities"
  #   method: GET
  #   path: /models/list
  #   func: list_models

  - name: hello_world
    kind: function.lua
    meta:
      comment: "Simple HTTP endpoint that returns Hello World as JSON"
    source: file://hello_world.lua
    method: handler
    modules: [ http ]

  - name: hello_world.endpoint
    kind: http.endpoint
    meta:
      comment: "Returns Hello World message"
    method: GET
    path: /hello
    func: hello_world
